import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const AUTOGENERATED_DIR = path.join(__dirname, '../docs/autogenerated');
const INDEX_FILE = path.join(AUTOGENERATED_DIR, 'index.md');

// Read all markdown files from category subdirectories
// Automatically discover all category folders
const categoryFolders = fs.readdirSync(AUTOGENERATED_DIR)
  .filter(item => {
    const itemPath = path.join(AUTOGENERATED_DIR, item);
    return fs.statSync(itemPath).isDirectory();
  })
  .sort();

const files = [];

categoryFolders.forEach(categoryFolder => {
  const categoryPath = path.join(AUTOGENERATED_DIR, categoryFolder);
  if (!fs.existsSync(categoryPath)) return;

  const categoryFiles = fs.readdirSync(categoryPath)
    .filter(f => f.endsWith('.md'))
    .map(filename => {
      const filePath = path.join(categoryPath, filename);
      const content = fs.readFileSync(filePath, 'utf-8');
      const { data } = matter(content);

      const title = data.title || filename.replace('.md', '');
      const description = data.description || '';

      return {
        categoryFolder,
        filename: filename.replace('.md', ''),
        title,
        description,
        tags: data.tags || [],
        date: data.date
      };
    });

  files.push(...categoryFiles);
});

// Group by category folder
const categorized = {};

// Generate human-readable category names from folder names
function formatCategoryName(folderName) {
  return folderName
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

files.forEach(file => {
  const categoryName = formatCategoryName(file.categoryFolder);

  if (!categorized[categoryName]) {
    categorized[categoryName] = [];
  }
  categorized[categoryName].push(file);
});

// Generate markdown content
const categoryCount = Object.keys(categorized).length;
let content = `---
title: "AI Model Comparisons Hub"
description: "Comprehensive index of ${files.length} AI comparison posts across ${categoryCount} categories"
date: 2025-09-29
category: comparison
tags:
  - AI Comparison
  - Index
  - Autogenerated
author: SNEOS Community
---

# AI Model Comparisons Hub

Welcome to the comprehensive AI comparisons directory. Explore **${files.length} detailed comparisons** across **${categoryCount} categories**, featuring head-to-head analyses of ChatGPT, Claude, DeepSeek, Gemini, Grok, and Mistral.

## Quick Stats

| Metric | Count |
|--------|-------|
| Total Posts | ${files.length} |
| Categories | ${categoryCount} |
| AI Models Compared | 6+ |

## Browse by Category

`;

// Sort categories and add posts
Object.keys(categorized).sort().forEach(category => {
  const posts = categorized[category];
  if (posts.length === 0) return;

  content += `### ${category}\n\n`;
  content += `<span class="category-badge">${posts.length} posts</span>\n\n`;

  posts.forEach(post => {
    const link = `/autogenerated/${post.categoryFolder}/${post.filename}.html`;
    content += `**[${post.title}](${link})**\n`;
    if (post.description) {
      const cleanDesc = post.description.replace(/^AI model comparison:\s*/i, '');
      content += `<br>${cleanDesc.substring(0, 120)}${cleanDesc.length > 120 ? '...' : ''}\n\n`;
    } else {
      content += '\n';
    }
  });

  content += '---\n\n';
});

content += `## About This Index

This directory contains comprehensive AI model comparisons across diverse topics and use cases. Each post features:

- **Head-to-head analysis** of multiple AI models
- **Real-world scenarios** and practical applications
- **Detailed comparisons** of responses and capabilities
- **Updated insights** reflecting 2025 AI capabilities

### Contributing Models

Our comparisons include leading AI models: ChatGPT, Claude, DeepSeek, Gemini, Grok, and Mistral.

---

*Last updated: ${new Date().toISOString().split('T')[0]} | Automatically generated index*
`;

// Write the index file
fs.writeFileSync(INDEX_FILE, content, 'utf-8');
console.log(`âœ… Generated index with ${files.length} posts across ${Object.keys(categorized).length} categories`);