import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const AUTOGENERATED_DIR = path.join(__dirname, '../docs/autogenerated');
const INDEX_FILE = path.join(AUTOGENERATED_DIR, 'index.md');

// Read all markdown files from category subdirectories
const categoryFolders = ['ai-comparison', 'education', 'finance', 'lawyers', 'legal', 'research', 'universities', 'viral-content'];
const files = [];

categoryFolders.forEach(categoryFolder => {
  const categoryPath = path.join(AUTOGENERATED_DIR, categoryFolder);
  if (!fs.existsSync(categoryPath)) return;

  const categoryFiles = fs.readdirSync(categoryPath)
    .filter(f => f.endsWith('.md'))
    .map(filename => {
      const filePath = path.join(categoryPath, filename);
      const content = fs.readFileSync(filePath, 'utf-8');
      const { data } = matter(content);

      const title = data.title || filename.replace('.md', '');
      const description = data.description || '';

      return {
        categoryFolder,
        filename: filename.replace('.md', ''),
        title,
        description,
        tags: data.tags || [],
        date: data.date
      };
    });

  files.push(...categoryFiles);
});

// Group by category folder
const categorized = {};
const categoryNames = {
  'ai-comparison': 'AI Comparison',
  'education': 'Education',
  'finance': 'Finance',
  'lawyers': 'Lawyers',
  'legal': 'Legal',
  'research': 'Research',
  'universities': 'Universities',
  'viral-content': 'VIRAL CONTENT'
};

files.forEach(file => {
  const categoryName = categoryNames[file.categoryFolder] || file.categoryFolder;

  if (!categorized[categoryName]) {
    categorized[categoryName] = [];
  }
  categorized[categoryName].push(file);
});

// Generate markdown content
let content = `---
title: "Autogenerated AI Comparisons"
description: "Index of ${files.length} autogenerated AI comparison posts"
date: 2025-09-29
category: comparison
layout: AutogeneratedIndex
tags:
  - AI Comparison
  - Index
  - Autogenerated
author: SNEOS Community
---

# Autogenerated AI Comparisons

This page indexes ${files.length} autogenerated AI comparison posts. Browse by category or explore all posts below.

## Contents by Category

`;

// Sort categories and add posts
Object.keys(categorized).sort().forEach(category => {
  const posts = categorized[category];
  if (posts.length === 0) return;

  content += `### ${category} (${posts.length} posts)\n\n`;

  posts.forEach(post => {
    const link = `/autogenerated/${post.categoryFolder}/${post.filename}.html`;
    content += `- [${post.title}](${link})\n`;
    if (post.description) {
      content += `  - *${post.description.substring(0, 150)}${post.description.length > 150 ? '...' : ''}*\n`;
    }
  });

  content += '\n';
});

content += `## Summary

- **Total posts**: ${files.length}
- **Categories covered**: ${Object.keys(categorized).length}

---

*ðŸ¤– Automatically generated index of AI comparison posts*
`;

// Write the index file
fs.writeFileSync(INDEX_FILE, content, 'utf-8');
console.log(`âœ… Generated index with ${files.length} posts across ${Object.keys(categorized).length} categories`);