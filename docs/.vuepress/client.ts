import { defineClientConfig } from "vuepress/client";
import ChatComparison from "./components/ChatComparison.vue";
import Clean from "./layouts/Clean.vue";
import AutogeneratedIndex from "./layouts/AutogeneratedIndex.vue";

export default defineClientConfig({
  enhance: ({ app }) => {
    app.component("ChatComparison", ChatComparison);
  },
  layouts: {
    Clean,
    AutogeneratedIndex,
  },
  setup() {
    // Fix for mobile navigation buttons not working on iOS
    if (typeof window !== 'undefined') {
      const fixMobileNav = () => {
        // Target all the mobile nav buttons
        const sidebarButton = document.querySelector('.vp-toggle-sidebar-button');
        const navbarButton = document.querySelector('.vp-toggle-navbar-button');
        const darkModeButton = document.querySelector('.vp-color-mode-switch');

        const buttons = [sidebarButton, navbarButton, darkModeButton].filter(Boolean);

        buttons.forEach(button => {
          if (button instanceof HTMLElement && !button.dataset.touchFixed) {
            // Mark as fixed to avoid duplicate handlers
            button.dataset.touchFixed = 'true';

            // Add explicit touch handler that triggers on touch
            button.addEventListener('touchend', (e) => {
              e.preventDefault();
              e.stopPropagation();
              button.click();
            }, { passive: false });
          }
        });

        // Close mobile nav menu when clicking links inside it
        const navScreen = document.getElementById('nav-screen');
        if (navScreen && !navScreen.dataset.closeFixed) {
          navScreen.dataset.closeFixed = 'true';

          // Find all links in the nav screen
          const navLinks = navScreen.querySelectorAll('a.route-link, a.auto-link');
          navLinks.forEach(link => {
            link.addEventListener('click', () => {
              // Close the nav screen by toggling the button
              const navbarToggle = document.querySelector('.vp-toggle-navbar-button');
              if (navbarToggle) {
                // Small delay to let navigation start
                setTimeout(() => {
                  navbarToggle.click();
                }, 50);
              }
            });
          });
        }
      };

      // Run on mount
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          setTimeout(fixMobileNav, 200);
        });
      } else {
        setTimeout(fixMobileNav, 200);
      }

      // Re-apply on route changes
      if (typeof window !== 'undefined') {
        let currentPath = window.location.pathname;
        const checkRoute = () => {
          if (window.location.pathname !== currentPath) {
            currentPath = window.location.pathname;
            setTimeout(fixMobileNav, 200);
          }
          requestAnimationFrame(checkRoute);
        };
        checkRoute();
      }
    }
  },
});
