import { defineClientConfig } from "vuepress/client";
import ChatComparison from "./components/ChatComparison.vue";
import Clean from "./layouts/Clean.vue";
import AutogeneratedIndex from "./layouts/AutogeneratedIndex.vue";

export default defineClientConfig({
  enhance: ({ app }) => {
    app.component("ChatComparison", ChatComparison);
  },
  layouts: {
    Clean,
    AutogeneratedIndex,
  },
  setup() {
    // Fix for mobile burger menu not working on iOS
    if (typeof window !== 'undefined') {
      const fixMobileNav = () => {
        // Add touch event listeners to burger buttons
        const burgerButtons = document.querySelectorAll('.sidebar-button, .navbar-toggle-button, [class*="toggle"]');
        burgerButtons.forEach(button => {
          if (button instanceof HTMLElement) {
            // Ensure the button is clickable
            button.style.cursor = 'pointer';
            button.style.pointerEvents = 'auto';

            // Add explicit touch handler
            button.addEventListener('touchstart', (e) => {
              e.stopPropagation();
              button.click();
            }, { passive: true });
          }
        });
      };

      // Run on mount and after route changes
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          setTimeout(fixMobileNav, 100);
        });
      } else {
        setTimeout(fixMobileNav, 100);
      }

      // Re-apply after any route change
      if (typeof window !== 'undefined' && 'MutationObserver' in window) {
        const observer = new MutationObserver(() => {
          fixMobileNav();
        });

        const startObserving = () => {
          const navbar = document.querySelector('.navbar, .vp-navbar');
          if (navbar) {
            observer.observe(navbar, { childList: true, subtree: true });
          }
        };

        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', startObserving);
        } else {
          startObserving();
        }
      }
    }
  },
});
